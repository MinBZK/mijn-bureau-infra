{{ $hostname := printf "%s.%s" .Values.global.hostname.docs .Values.global.domain }}

global:
  security:
    allowInsecureImages: true

  imagePullSecrets:
    - name: {{ (coalesce .Values.container.docs.imagePullSecret .Values.container.default.imagePullSecret) | quote }}

commonLabels:
  app.kubernetes.io/part-of: docs

clusterDomain: {{ .Values.cluster.networking.domain }}

backend:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.backend.repository | quote }}
    tag: {{ .Values.container.docs.backend.tag | quote }}
  replicaCount: 1
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  pdb:
    maxUnavailable: 1
  networkPolicy:
    extraEgress:
      # Database connectivity
      - ports:
          - port: {{ .Values.database.docs.port }}
            protocol: TCP
        {{- if .Values.database.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: postgresql
                app.kubernetes.io/component: primary
        {{- end }}
      # Redis connectivity
      - ports:
          - port: {{ .Values.cache.docs.port }}
            protocol: TCP
        {{- if .Values.cache.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: redis
                app.kubernetes.io/component: master
        {{- end }}
      # MinIO connectivity
      - ports:
          - port: {{ .Values.objectstore.docs.port }}
            protocol: TCP
        {{- if .Values.objectstore.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: minio
        {{- end }}
      # Allow https egress for keycloak connection
      - ports:
          - port: 443
      # Allow http egress for yProvider connection
      - ports:
          - port: 4444
  configuration:
    ai:
      enabled: {{ not ( empty .Values.ai.llm.model ) }}
      allowReachFrom: "authenticated"
      apiKey: {{ .Values.ai.llm.apiKey }}
      baseUrl: {{ .Values.ai.llm.endpoint }}
      model: {{ .Values.ai.llm.model }}
    django:
      email:
        brandName: {{ .Values.smtp.from.name }}
        from: {{ .Values.smtp.from.email }}
        host:
          name: {{ .Values.smtp.host }}
          username: {{ .Values.smtp.username }}
          password: {{ .Values.smtp.password }}
        logoImg: {{ .Values.smtp.from.logoImage }}
        port: {{ .Values.smtp.port }}
        useTls: {{ .Values.smtp.tls.enabled }}
      secretKey: {{ .Values.application.docs.backend.django.secretKey }}
      superUser:
        email: {{ .Values.secret.docs.superUser.email }}
        password: {{ .Values.secret.docs.superUser.password }}
      storagesStaticFilesBackend: django.contrib.staticfiles.storage.StaticFilesStorage
    languageCode: {{ .Values.global.defaultLocale | default "nl" }}
    frontend:
      cssUrl: {{ .Values.application.docs.backend.frontend.cssUrl }}
      homepageFeatureEnabled: {{ .Values.application.docs.backend.frontend.homepageFeatureEnabled }}
      theme: {{ .Values.application.docs.backend.frontend.theme }}
    malwareDetection:
      backend: {{ .Values.application.docs.backend.malwareDetection.backend }}
      parameters: {{ .Values.application.docs.backend.malwareDetection.parameters | toYaml | nindent 8 }}
    themeCustomization:
      enabled: true
      fileContent: {{ .Values.application.docs.backend.themeCustomization.fileContent | toYaml | nindent 8 }}
  celery:
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
    resources: {{ .Values.resource.docs.celery | toYaml | nindent 6 }}
    podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 6 }}
    containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 6 }}
    networkPolicy:
      extraEgress:
        # Database connectivity
        - ports:
            - port: {{ .Values.database.docs.port }}
              protocol: TCP
          {{- if .Values.database.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/component: primary
          {{- end }}
        # Redis connectivity
        - ports:
            - port: {{ .Values.cache.docs.port }}
              protocol: TCP
          {{- if .Values.cache.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: redis
                  app.kubernetes.io/component: master
          {{- end }}
        # MinIO connectivity
        - ports:
            - port: {{ .Values.objectstore.docs.port }}
              protocol: TCP
          {{- if .Values.objectstore.docs.isInternal }}
          to:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: minio
          {{- end }}
    configuration:
      concurrency:
        min: {{ .Values.application.docs.backend.celery.concurrency.min }}
        max: {{ .Values.application.docs.backend.celery.concurrency.max }}

frontend:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.frontend.repository | quote }}
    tag: {{ .Values.container.docs.frontend.tag | quote }}
  replicaCount: 1
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  pdb:
    maxUnavailable: 1
  configuration:
    publishAsMit: {{ .Values.application.docs.frontend.publishAsMit }}

yProvider:
  image:
    registry: {{(coalesce .Values.container.docs.registry .Values.container.default.registry) | quote }}
    repository: {{ .Values.container.docs.yProvider.repository | quote }}
    tag: {{ .Values.container.docs.yProvider.tag | quote }}
  replicaCount: 5
  resourcesPreset: {{ .Values.global.resourcesPreset | quote }}
  resources: {{ .Values.resource.docs.backend | toYaml | nindent 4 }}
  podSecurityContext: {{ .Values.security.default.podSecurityContext | toYaml | nindent 4 }}
  containerSecurityContext: {{ .Values.security.default.containerSecurityContext | toYaml | nindent 4 }}
  pdb:
    maxUnavailable: 1
  networkPolicy:
    extraEgress:
      # Database connectivity
      - ports:
          - port: {{ .Values.database.docs.port }}
            protocol: TCP
        {{- if .Values.database.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: postgresql
                app.kubernetes.io/component: primary
        {{- end }}
      # Redis connectivity
      - ports:
          - port: {{ .Values.cache.docs.port }}
            protocol: TCP
        {{- if .Values.cache.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: redis
                app.kubernetes.io/component: master
        {{- end }}
      # MinIO connectivity
      - ports:
          - port: {{ .Values.objectstore.docs.port }}
            protocol: TCP
        {{- if .Values.objectstore.docs.isInternal }}
        to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: minio
        {{- end }}
      # Allow https egress for backend connection
      - ports:
          - port: 443
  configuration:
    api:
      key: {{ .Values.application.docs.yProvider.key }}
    caches:
      keyPrefix: {{ now | unixEpoch | quote }}

ingress:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressAdmin:
  enabled: true
  hostname: {{ .Values.global.hostname.docs }}.{{ .Values.global.domain }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

ingressNginx:
  enabled: true
  hostname: {{ $hostname }}
  ingressClassName: {{ .Values.cluster.ingress.className | quote }}
  annotations:
    {{- if .Values.cluster.ingress.annotations }}
    {{ .Values.cluster.ingress.annotations | toYaml | nindent 4 }}
    {{- end }}
    {{- if eq .Values.cluster.ingress.type "nginx" }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Content-Security-Policy "default-src 'none'" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    nginx.ingress.kubernetes.io/enable-websocket: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
    {{- else if eq .Values.cluster.ingress.type "haproxy-openshift" }}
    haproxy.router.openshift.io/timeout-tunnel: "86400"
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
    {{- end }}
  tls: {{ .Values.global.tls.enabled | default true }}
  selfSigned: {{ and .Values.global.tls.enabled .Values.global.tls.selfSigned | default false }}
  extraTls: {{ .Values.tls.docs | toYaml | nindent 4 }}

collaboration:
  api:
    secret: {{ .Values.application.docs.collaboration.secret }}
  webSockets:
    notConnectedReadOnly: true

auth:
  oidc:
    userInfo:
      shortNameField: {{ .Values.authentication.oidc.claims.given_name }}
      fullNameField: {{ .Values.authentication.oidc.claims.display_name }}
    openIdProvider:
      jwksEndpoint: {{ .Values.authentication.oidc.jwks_uri }}
      authorizationEndpoint: {{ .Values.authentication.oidc.authorization_endpoint }}
      tokenEndpoint: {{ .Values.authentication.oidc.token_endpoint }}
      userEndpoint: {{ .Values.authentication.oidc.userinfo_endpoint }}
      logoutEndpoint: {{ .Values.authentication.oidc.end_session_endpoint }}
    relyingParty:
      clientId: {{ .Values.authentication.client.docs.client_id }}
      clientSecret: {{ .Values.authentication.client.docs.client_secret }}
      signAlgo: {{ .Values.authentication.client.docs.sign_algorithm }}
      scopes: {{ .Values.authentication.client.docs.scopes }}

database:
  engine: {{ .Values.database.docs.engine }}
  host: {{ .Values.database.docs.host }}
  port: {{ .Values.database.docs.port }}
  name: {{ .Values.database.docs.name }}
  user: {{ .Values.database.docs.user }}
  password: {{ .Values.database.docs.password }}

redis:
  url: {{ printf "redis://default:%s@%s:%d/1" .Values.cache.docs.password .Values.cache.docs.host .Values.cache.docs.port }}

awsS3:
  endpointUrl: {{ printf "http%s://%s:%d" ( ternary "s" "" .Values.objectstore.docs.useSSL ) .Values.objectstore.docs.endpoint .Values.objectstore.docs.port }}
  accessKeyId: {{ .Values.objectstore.docs.username }}
  secretAccessKey: {{ .Values.objectstore.docs.rootPassword }}
  storageBucketName: {{ .Values.objectstore.docs.bucket }}
